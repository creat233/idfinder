
import { AllRecoveryData, ReportedCard } from "@/types/adminRecoveries";
import { isValidRecoveryRequest, extractOwnerInfo, hasPromoCodeUsed, extractPromoDiscount } from "@/utils/recoveryValidation";
import { fetchReporterProfile, fetchPromoUsage, fetchPromoOwnerPhone } from "./adminRecoveryService";

export const processReportedCard = async (card: ReportedCard): Promise<AllRecoveryData | null> => {
  console.log("üîç Analyse de la carte:", card.card_number);
  console.log("üìä Statut de la carte:", card.status);
  console.log("üìù Description pr√©sente:", !!card.description);
  console.log("üìÑ Description compl√®te:", card.description?.substring(0, 300));
  
  const description = card.description || "";
  
  // V√©rifier si c'est une demande de r√©cup√©ration valide
  const isValid = isValidRecoveryRequest(description, card.status);
  
  // Pour le debug, traiter toutes les cartes qui ne sont pas en statut 'pending' par d√©faut
  const shouldProcess = isValid || (card.status && card.status !== 'pending') || description.length > 0;
  
  if (!shouldProcess) {
    console.log("‚ùå Carte ignor√©e - pas une demande de r√©cup√©ration");
    return null;
  }

  console.log("‚úÖ TRAITEMENT DE LA CARTE:", card.card_number);

  try {
    // R√©cup√©rer le profil du signaleur
    const reporterProfile = await fetchReporterProfile(card.reporter_id);

    // Extraire les informations depuis la description
    const { ownerName, ownerPhone, finalPrice } = extractOwnerInfo(description);

    // Traiter les informations de code promo si pr√©sentes
    let promoData = null;
    if (hasPromoCodeUsed(description) && ownerPhone !== "Non renseign√©") {
      console.log("üéÅ Code promo d√©tect√©, recherche des d√©tails...");
      const discountAmount = extractPromoDiscount(description);
      
      const promoUsage = await fetchPromoUsage(ownerPhone);
      if (promoUsage && promoUsage.promo_codes) {
        const promoCodeOwnerPhone = await fetchPromoOwnerPhone(promoUsage.promo_codes.user_id);
        
        promoData = {
          promoCode: promoUsage.promo_codes.code,
          promoCodeOwnerId: promoUsage.promo_codes.user_id,
          promoCodeOwnerPhone,
          promoUsageId: promoUsage.id,
          discountAmount: promoUsage.discount_amount
        };
        
        console.log("üé´ Code promo trouv√©:", promoData.promoCode);
      }
    }

    // Informations du signaleur
    const reporterName = reporterProfile 
      ? `${reporterProfile.first_name || ''} ${reporterProfile.last_name || ''}`.trim()
      : "Signaleur non renseign√©";
    const reporterPhone = reporterProfile?.phone || card.reporter_phone || "Non renseign√©";

    // D√©terminer le statut final
    let finalStatus = card.status || "recovery_requested";
    if (finalStatus === 'pending' && (isValid || description.length > 0)) {
      finalStatus = "recovery_requested";
    }

    const recovery: AllRecoveryData = {
      id: card.id,
      card_id: card.id,
      card_number: card.card_number,
      document_type: card.document_type,
      location: card.location,
      owner_name: ownerName,
      owner_phone: ownerPhone,
      reporter_name: reporterName,
      reporter_phone: reporterPhone,
      reporter_id: card.reporter_id,
      final_price: finalPrice,
      created_at: card.created_at,
      status: finalStatus,
      promo_code: promoData?.promoCode,
      promo_code_owner_id: promoData?.promoCodeOwnerId,
      promo_code_owner_phone: promoData?.promoCodeOwnerPhone,
      promo_usage_id: promoData?.promoUsageId,
      discount_amount: promoData?.discountAmount
    };

    console.log("‚úÖ R√âCUP√âRATION CR√â√âE AVEC SUCC√àS:", {
      carte: recovery.card_number,
      propri√©taire: recovery.owner_name,
      t√©l√©phone: recovery.owner_phone,
      prix: recovery.final_price,
      statut: recovery.status,
      isValidRecovery: isValid
    });

    return recovery;
  } catch (error) {
    console.error("‚ùå Erreur lors du traitement de la carte:", card.card_number, error);
    return null;
  }
};
