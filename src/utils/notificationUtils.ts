
import { supabase } from "@/integrations/supabase/client";

export const createMissingCardNotification = async (cardNumber: string) => {
  try {
    console.log("üîç Recherche de cartes signal√©es pour le num√©ro:", cardNumber);
    
    // Trouver la carte signal√©e
    const { data: reportedCard, error: reportedError } = await supabase
      .from("reported_cards")
      .select("*")
      .eq("card_number", cardNumber)
      .order("created_at", { ascending: false })
      .limit(1)
      .single();

    if (reportedError || !reportedCard) {
      console.log("‚ùå Aucune carte signal√©e trouv√©e pour ce num√©ro");
      return { success: false, message: "Aucune carte signal√©e trouv√©e" };
    }

    console.log("‚úÖ Carte signal√©e trouv√©e:", reportedCard);

    // Trouver le propri√©taire de la carte
    const { data: userCard, error: userCardError } = await supabase
      .from("user_cards")
      .select("*")
      .eq("card_number", cardNumber)
      .eq("is_active", true)
      .limit(1)
      .single();

    if (userCardError || !userCard) {
      console.log("‚ùå Aucun propri√©taire trouv√© pour cette carte");
      return { success: false, message: "Aucun propri√©taire trouv√©" };
    }

    console.log("‚úÖ Propri√©taire trouv√©:", userCard);

    // R√©cup√©rer le profil de l'utilisateur s√©par√©ment
    const { data: profile, error: profileError } = await supabase
      .from("profiles")
      .select("first_name, last_name, is_on_vacation")
      .eq("id", userCard.user_id)
      .single();

    if (profileError) {
      console.log("‚ö†Ô∏è Profil non trouv√©, on continue sans v√©rification du mode vacances");
    }

    // V√©rifier si l'utilisateur est en mode vacances
    if (profile?.is_on_vacation) {
      console.log("‚ö†Ô∏è L'utilisateur est en mode vacances, pas de notification");
      return { success: false, message: "Utilisateur en mode vacances" };
    }

    // V√©rifier si une notification existe d√©j√†
    const { data: existingNotification } = await supabase
      .from("notifications")
      .select("id")
      .eq("user_id", userCard.user_id)
      .eq("reported_card_id", reportedCard.id)
      .eq("type", "card_found")
      .limit(1)
      .single();

    if (existingNotification) {
      console.log("‚ö†Ô∏è Une notification existe d√©j√† pour cette carte");
      return { success: false, message: "Notification d√©j√† existante" };
    }

    // Cr√©er la notification
    const { data: notification, error: notificationError } = await supabase
      .from("notifications")
      .insert({
        user_id: userCard.user_id,
        reported_card_id: reportedCard.id,
        type: "card_found",
        title: "üîç Votre carte a √©t√© signal√©e !",
        message: `Excellente nouvelle ! Votre carte ${reportedCard.document_type} avec le num√©ro ${reportedCard.card_number} a √©t√© signal√©e comme trouv√©e sur FinderID. Recherchez ce num√©ro dans la barre de recherche pour voir les d√©tails et confirmer la r√©cup√©ration.`,
        is_read: false
      })
      .select()
      .single();

    if (notificationError) {
      console.error("‚ùå Erreur lors de la cr√©ation de la notification:", notificationError);
      return { success: false, message: "Erreur lors de la cr√©ation" };
    }

    console.log("‚úÖ Notification cr√©√©e avec succ√®s:", notification);
    return { success: true, notification };

  } catch (error) {
    console.error("‚ùå Erreur g√©n√©rale:", error);
    return { success: false, message: "Erreur g√©n√©rale" };
  }
};

// Fonction pour v√©rifier et cr√©er automatiquement une notification apr√®s signalement
export const checkAndNotifyCardOwner = async (cardNumber: string) => {
  try {
    console.log("üîî V√©rification automatique pour notification du propri√©taire de la carte:", cardNumber);
    
    // Chercher si quelqu'un a enregistr√© cette carte
    const { data: userCard, error: userCardError } = await supabase
      .from("user_cards")
      .select("*")
      .eq("card_number", cardNumber)
      .eq("is_active", true)
      .limit(1)
      .single();

    if (userCardError || !userCard) {
      console.log("‚ÑπÔ∏è Aucun propri√©taire enregistr√© pour cette carte");
      return { success: false, message: "Aucun propri√©taire enregistr√©" };
    }

    // V√©rifier le mode vacances
    const { data: profile, error: profileError } = await supabase
      .from("profiles")
      .select("is_on_vacation")
      .eq("id", userCard.user_id)
      .single();

    if (profile?.is_on_vacation) {
      console.log("‚ö†Ô∏è Utilisateur en mode vacances, pas de notification");
      return { success: false, message: "Utilisateur en mode vacances" };
    }

    // Chercher la carte signal√©e r√©cemment
    const { data: reportedCard, error: reportedError } = await supabase
      .from("reported_cards")
      .select("*")
      .eq("card_number", cardNumber)
      .order("created_at", { ascending: false })
      .limit(1)
      .single();

    if (reportedError || !reportedCard) {
      console.log("‚ùå Carte signal√©e non trouv√©e");
      return { success: false, message: "Carte signal√©e non trouv√©e" };
    }

    // V√©rifier si notification existe d√©j√†
    const { data: existingNotification } = await supabase
      .from("notifications")
      .select("id")
      .eq("user_id", userCard.user_id)
      .eq("reported_card_id", reportedCard.id)
      .eq("type", "card_found")
      .limit(1)
      .single();

    if (existingNotification) {
      console.log("‚ÑπÔ∏è Notification d√©j√† existante");
      return { success: false, message: "Notification d√©j√† existante" };
    }

    // Cr√©er la notification
    const { data: notification, error: notificationError } = await supabase
      .from("notifications")
      .insert({
        user_id: userCard.user_id,
        reported_card_id: reportedCard.id,
        type: "card_found",
        title: "üîç Votre carte a √©t√© signal√©e !",
        message: `Excellente nouvelle ! Votre carte ${reportedCard.document_type} avec le num√©ro ${reportedCard.card_number} a √©t√© signal√©e comme trouv√©e sur FinderID. Recherchez ce num√©ro dans la barre de recherche pour voir les d√©tails et confirmer la r√©cup√©ration.`,
        is_read: false
      })
      .select()
      .single();

    if (notificationError) {
      console.error("‚ùå Erreur cr√©ation notification:", notificationError);
      return { success: false, message: "Erreur lors de la cr√©ation" };
    }

    console.log("‚úÖ Notification automatique cr√©√©e:", notification);
    return { success: true, notification };

  } catch (error) {
    console.error("‚ùå Erreur v√©rification automatique:", error);
    return { success: false, message: "Erreur g√©n√©rale" };
  }
};

export const debugCardNotificationSystem = async (cardNumber: string) => {
  try {
    console.log("üîç Diagnostic du syst√®me de notifications pour la carte:", cardNumber);
    
    // V√©rifier les cartes utilisateur
    const { data: userCards } = await supabase
      .from("user_cards")
      .select("*")
      .eq("card_number", cardNumber);

    console.log("üë§ Cartes utilisateur trouv√©es:", userCards);

    // V√©rifier les profils si des cartes utilisateur existent
    let profilesData = null;
    if (userCards && userCards.length > 0) {
      const { data: profiles } = await supabase
        .from("profiles")
        .select("id, first_name, last_name, is_on_vacation, enable_security_notifications")
        .in("id", userCards.map(card => card.user_id));
      
      profilesData = profiles;
    }

    console.log("üë§ Profils trouv√©s:", profilesData);

    // V√©rifier les cartes signal√©es
    const { data: reportedCards } = await supabase
      .from("reported_cards")
      .select("*")
      .eq("card_number", cardNumber);

    console.log("üìã Cartes signal√©es trouv√©es:", reportedCards);

    // V√©rifier les notifications existantes
    const { data: notifications } = await supabase
      .from("notifications")
      .select("*")
      .or(`message.like.%${cardNumber}%,reported_card_id.in.(${reportedCards?.map(rc => rc.id).join(",") || "00000000-0000-0000-0000-000000000000"})`);

    console.log("üîî Notifications trouv√©es:", notifications);

    return {
      userCards,
      profiles: profilesData,
      reportedCards,
      notifications,
      summary: {
        hasUserCard: (userCards?.length || 0) > 0,
        hasReportedCard: (reportedCards?.length || 0) > 0,
        hasNotification: (notifications?.length || 0) > 0,
        userInVacationMode: profilesData?.[0]?.is_on_vacation || false
      }
    };
  } catch (error) {
    console.error("‚ùå Erreur lors du diagnostic:", error);
    return null;
  }
};
