
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Mail, Send, Users, Building } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

export const PartnerEmailTemplates = () => {
  const [selectedTemplate, setSelectedTemplate] = useState('clinic');
  const [emailContent, setEmailContent] = useState('');
  const [subject, setSubject] = useState('');
  const [recipientEmail, setRecipientEmail] = useState('');
  const { toast } = useToast();

  const templates = [
    {
      id: 'clinic',
      name: 'Email Partenariat Clinique',
      icon: <Building className="h-5 w-5" />,
      subject: 'Partenariat FinderID - Opportunit√© de collaboration pour votre clinique',
      content: `Bonjour,

J'esp√®re que ce message vous trouve en bonne sant√©.

Je me permets de vous contacter au nom de FinderID (www.finderid.info), une plateforme innovante qui r√©volutionne la r√©cup√©ration de documents perdus au S√©n√©gal.

**Notre solution :**
‚Ä¢ Syst√®me de r√©cup√©ration de documents perdus (CNI, permis, cartes vitales...)
‚Ä¢ Plateforme s√©curis√©e avec notifications automatiques
‚Ä¢ Service d√©j√† utilis√© par plus de 500 utilisateurs
‚Ä¢ Taux de r√©cup√©ration de 95%

**Opportunit√© de partenariat :**
Nous souhaitons √©tablir un partenariat privil√©gi√© avec votre clinique pour :
- Faciliter la r√©cup√©ration des cartes vitales de vos patients
- Proposer un service VIP de r√©cup√©ration rapide
- B√©n√©ficier d'une commission sur chaque r√©cup√©ration

**Avantages pour votre clinique :**
‚úì Service gratuit pour vos patients
‚úì Commission de 20% sur chaque r√©cup√©ration
‚úì Support technique d√©di√©
‚úì Promotion de votre clinique sur notre plateforme

Seriez-vous disponible pour un rendez-vous cette semaine afin de discuter de cette opportunit√© ?

Cordialement,
L'√©quipe FinderID
üìß contact@finderid.info
üì± +221 XX XXX XX XX`
    },
    {
      id: 'business',
      name: 'Email Standard Entreprise',
      icon: <Users className="h-5 w-5" />,
      subject: 'Partenariat FinderID - Solution innovante de r√©cup√©ration de documents',
      content: `Bonjour,

Je vous contacte concernant une opportunit√© de partenariat avec FinderID.

**√Ä propos de FinderID :**
FinderID est la premi√®re plateforme s√©n√©galaise de r√©cup√©ration de documents perdus. Notre solution permet aux citoyens de r√©cup√©rer rapidement leurs documents importants (CNI, permis de conduire, cartes professionnelles, etc.).

**Proposition de partenariat :**
Nous proposons √† votre entreprise de devenir partenaire officiel pour :
- Offrir ce service √† vos employ√©s
- B√©n√©ficier d'une commission sur les r√©cup√©rations
- Promouvoir votre image d'entreprise responsable

**B√©n√©fices mutuels :**
‚Ä¢ Revenus additionnels pour votre entreprise
‚Ä¢ Service gratuit pour vos employ√©s
‚Ä¢ Renforcement de votre image RSE
‚Ä¢ Support marketing inclus

Je serais ravi de vous pr√©senter notre solution plus en d√©tail.

Meilleures salutations,
L'√©quipe FinderID`
    }
  ];

  const currentTemplate = templates.find(t => t.id === selectedTemplate);

  const handleTemplateSelect = (templateId: string) => {
    const template = templates.find(t => t.id === templateId);
    if (template) {
      setSelectedTemplate(templateId);
      setSubject(template.subject);
      setEmailContent(template.content);
    }
  };

  const handleSendEmail = () => {
    if (!recipientEmail || !subject || !emailContent) {
      toast({
        variant: "destructive",
        title: "Erreur",
        description: "Veuillez remplir tous les champs"
      });
      return;
    }

    // Simulate email sending
    toast({
      title: "Email envoy√© !",
      description: `L'email a √©t√© envoy√© √† ${recipientEmail}`
    });

    // Reset form
    setRecipientEmail('');
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Mail className="h-5 w-5" />
            Email Group√© & Partenariats
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Template Selection */}
          <div>
            <Label className="text-base font-medium mb-3 block">Choisir un mod√®le d'email</Label>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {templates.map((template) => (
                <Card 
                  key={template.id}
                  className={`cursor-pointer transition-all ${
                    selectedTemplate === template.id 
                      ? 'ring-2 ring-blue-500 bg-blue-50' 
                      : 'hover:shadow-md'
                  }`}
                  onClick={() => handleTemplateSelect(template.id)}
                >
                  <CardContent className="p-4">
                    <div className="flex items-center gap-3">
                      <div className="p-2 bg-blue-100 rounded-lg">
                        {template.icon}
                      </div>
                      <div>
                        <h3 className="font-medium">{template.name}</h3>
                        <p className="text-sm text-gray-600">
                          {template.id === 'clinic' ? 'Pour les cliniques et centres de sant√©' : 'Pour les entreprises et organisations'}
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>

          {/* Email Form */}
          <div className="space-y-4">
            <div>
              <Label htmlFor="recipient">Email du destinataire</Label>
              <Input
                id="recipient"
                type="email"
                placeholder="partenaire@example.com"
                value={recipientEmail}
                onChange={(e) => setRecipientEmail(e.target.value)}
              />
            </div>

            <div>
              <Label htmlFor="subject">Sujet</Label>
              <Input
                id="subject"
                value={subject}
                onChange={(e) => setSubject(e.target.value)}
              />
            </div>

            <div>
              <Label htmlFor="content">Contenu de l'email</Label>
              <Textarea
                id="content"
                rows={15}
                value={emailContent}
                onChange={(e) => setEmailContent(e.target.value)}
                className="font-mono text-sm"
              />
            </div>

            <Button 
              onClick={handleSendEmail}
              className="w-full"
              size="lg"
            >
              <Send className="h-4 w-4 mr-2" />
              Envoyer l'email
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
