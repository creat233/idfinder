
import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/useToast";
import { AllRecoveryData } from "@/types/adminRecoveries";
import { processReportedCard } from "@/services/recoveryDataProcessor";

export const useAdminAllRecoveries = () => {
  const [recoveries, setRecoveries] = useState<AllRecoveryData[]>([]);
  const [loading, setLoading] = useState(true);
  const { showError, showSuccess } = useToast();

  const fetchAllRecoveries = async () => {
    try {
      console.log("üîÑ R√©cup√©ration de TOUTES les cartes signal√©es...");
      
      // R√©cup√©rer TOUTES les cartes signal√©es
      const { data: reportedCards, error } = await supabase
        .from("reported_cards")
        .select("*")
        .order("created_at", { ascending: false });

      if (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration:", error);
        throw error;
      }

      if (!reportedCards || reportedCards.length === 0) {
        console.log("üì≠ Aucune carte trouv√©e");
        setRecoveries([]);
        setLoading(false);
        return;
      }

      console.log(`üìã ${reportedCards.length} cartes trouv√©es, analyse en cours...`);
      console.log("üîç Cartes r√©cup√©r√©es:", reportedCards.map(card => ({
        numero: card.card_number,
        statut: card.status,
        description: card.description ? "Oui" : "Non"
      })));

      // Traiter toutes les cartes pour identifier les demandes de r√©cup√©ration
      const enrichedRecoveries: AllRecoveryData[] = [];

      for (const card of reportedCards) {
        console.log(`üîç Traitement de la carte ${card.card_number}...`);
        console.log(`üìä Statut: ${card.status}`);
        console.log(`üìù Description: ${card.description ? card.description.substring(0, 100) + "..." : "Aucune"}`);
        
        const recovery = await processReportedCard(card);
        if (recovery) {
          enrichedRecoveries.push(recovery);
          console.log(`‚úÖ Carte ${card.card_number} ajout√©e aux r√©cup√©rations`);
        } else {
          console.log(`‚ùå Carte ${card.card_number} ignor√©e (pas de demande de r√©cup√©ration)`);
        }
      }

      console.log(`üéâ Total des demandes de r√©cup√©ration trouv√©es: ${enrichedRecoveries.length}`);
      
      // Afficher les d√©tails des r√©cup√©rations trouv√©es
      if (enrichedRecoveries.length > 0) {
        console.log("üìã D√©tails des r√©cup√©rations:");
        enrichedRecoveries.forEach(recovery => {
          console.log(`- Carte: ${recovery.card_number}, Propri√©taire: ${recovery.owner_name}, Statut: ${recovery.status}`);
        });
      }
      
      setRecoveries(enrichedRecoveries);
      
      if (enrichedRecoveries.length > 0) {
        showSuccess("Succ√®s", `${enrichedRecoveries.length} demande(s) de r√©cup√©ration trouv√©e(s)`);
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration des donn√©es:", error);
      showError("Erreur", "Impossible de r√©cup√©rer les donn√©es de r√©cup√©ration");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchAllRecoveries();

    // √âcouter les changements en temps r√©el sur toutes les cartes
    const channel = supabase
      .channel('admin-all-cards-changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'reported_cards'
        },
        (payload) => {
          console.log("üîÑ Changement d√©tect√© dans reported_cards:", payload);
          console.log("üîÑ Type d'√©v√©nement:", payload.eventType);
          console.log("üîÑ Donn√©es:", payload.new || payload.old);
          
          // Actualisation imm√©diate apr√®s un court d√©lai
          setTimeout(() => {
            console.log("üîÑ Actualisation automatique des donn√©es...");
            fetchAllRecoveries();
          }, 1000);
        }
      )
      .subscribe((status) => {
        console.log("üì° Statut de la souscription temps r√©el:", status);
        if (status === 'SUBSCRIBED') {
          console.log("‚úÖ Souscription temps r√©el active pour toutes les cartes");
        }
      });

    return () => {
      console.log("üîå D√©connexion du canal temps r√©el");
      supabase.removeChannel(channel);
    };
  }, []);

  // Fonction pour forcer l'actualisation
  const forceRefresh = async () => {
    console.log("üîÑ Actualisation forc√©e demand√©e...");
    setLoading(true);
    await fetchAllRecoveries();
    showSuccess("Succ√®s", "Donn√©es actualis√©es");
  };

  return {
    recoveries,
    loading,
    refetch: fetchAllRecoveries,
    forceRefresh,
  };
};
