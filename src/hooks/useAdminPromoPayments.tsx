
import { useState } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/useToast";

export const useAdminPromoPayments = () => {
  const [loading, setLoading] = useState(false);
  const { showSuccess, showError } = useToast();

  const confirmRecoveryPayment = async (recoveryData: {
    cardId: string;
    ownerName: string;
    ownerPhone: string;
    reporterId: string;
    reporterName: string;
    finalPrice: number;
    promoUsageId?: string;
    promoCodeOwnerId?: string;
    promoCode?: string;
  }) => {
    try {
      setLoading(true);
      console.log("Confirmation du paiement de r√©cup√©ration:", recoveryData);

      // 1. Notification au propri√©taire de la carte
      const { error: ownerNotificationError } = await supabase
        .from("notifications")
        .insert({
          user_id: recoveryData.reporterId, // On utilise l'ID du signaleur car on n'a pas l'ID du propri√©taire
          type: "recovery_payment_confirmed",
          title: "üí∞ Paiement confirm√© - R√©cup√©ration de carte",
          message: `Le paiement de ${recoveryData.finalPrice} FCFA pour la r√©cup√©ration de votre carte a √©t√© confirm√© par l'administration. Vous pouvez maintenant r√©cup√©rer votre carte.`,
          is_read: false
        });

      if (ownerNotificationError) {
        console.error("Erreur notification propri√©taire:", ownerNotificationError);
      }

      // 2. Notification au signaleur (r√©compense de 2000 FCFA)
      const { error: reporterNotificationError } = await supabase
        .from("notifications")
        .insert({
          user_id: recoveryData.reporterId,
          type: "reporter_reward_received",
          title: "üéâ R√©compense re√ßue - Signalement de carte",
          message: `F√©licitations ! Vous avez re√ßu votre r√©compense de 2000 FCFA pour avoir signal√© une carte qui a √©t√© r√©cup√©r√©e. Merci de contribuer √† FinderID !`,
          is_read: false
        });

      if (reporterNotificationError) {
        console.error("Erreur notification signaleur:", reporterNotificationError);
      }

      // 3. Si un code promo a √©t√© utilis√©, notifier le propri√©taire du code promo
      if (recoveryData.promoUsageId && recoveryData.promoCodeOwnerId && recoveryData.promoCode) {
        const { error: promoOwnerNotificationError } = await supabase
          .from("notifications")
          .insert({
            user_id: recoveryData.promoCodeOwnerId,
            type: "promo_payment_received",
            title: "üí∞ Paiement re√ßu - Code promo",
            message: `F√©licitations ! Vous avez re√ßu un paiement de 1000 FCFA pour l'utilisation de votre code promo ${recoveryData.promoCode}. Le propri√©taire a r√©cup√©r√© sa carte avec succ√®s.`,
            is_read: false
          });

        if (promoOwnerNotificationError) {
          console.error("Erreur notification propri√©taire code promo:", promoOwnerNotificationError);
        }

        // Marquer l'utilisation du code promo comme pay√©e
        const { error: updatePromoError } = await supabase
          .from("promo_usage")
          .update({ 
            // Note: Ces champs devront √™tre ajout√©s √† la table promo_usage si n√©cessaire
          })
          .eq("id", recoveryData.promoUsageId);

        if (updatePromoError) {
          console.error("Erreur mise √† jour promo usage:", updatePromoError);
        }
      }

      // 4. Mettre √† jour le statut de la carte comme r√©cup√©r√©e
      const { error: cardUpdateError } = await supabase
        .from("reported_cards")
        .update({ 
          status: "recovered",
          description: (await supabase
            .from("reported_cards")
            .select("description")
            .eq("id", recoveryData.cardId)
            .single()).data?.description + `\n\n--- PAIEMENT CONFIRM√â ---\nDate de confirmation: ${new Date().toLocaleString('fr-FR')}\nStatut: PAY√â ET R√âCUP√âR√â`
        })
        .eq("id", recoveryData.cardId);

      if (cardUpdateError) {
        console.error("Erreur mise √† jour carte:", cardUpdateError);
      }

      showSuccess(
        "Paiement confirm√©", 
        `Toutes les notifications ont √©t√© envoy√©es et les paiements confirm√©s (Propri√©taire: ${recoveryData.finalPrice} FCFA, Signaleur: 2000 FCFA${recoveryData.promoCode ? `, Propri√©taire code promo: 1000 FCFA` : ''})`
      );
    } catch (error) {
      console.error("Erreur lors de la confirmation du paiement:", error);
      showError("Erreur", "Impossible de confirmer le paiement");
    } finally {
      setLoading(false);
    }
  };

  // Garder l'ancienne m√©thode pour compatibilit√©
  const confirmPromoPayment = async (promoUsageId: string, promoCodeOwnerId: string, amount: number) => {
    try {
      setLoading(true);
      console.log("Confirmation du paiement pour:", { promoUsageId, promoCodeOwnerId, amount });

      const { error: notificationError } = await supabase
        .from("notifications")
        .insert({
          user_id: promoCodeOwnerId,
          type: "promo_payment_received",
          title: "üí∞ Paiement re√ßu - Code promo",
          message: `F√©licitations ! Vous avez re√ßu un paiement de ${amount} FCFA pour l'utilisation de votre code promo. Le paiement a √©t√© confirm√© par l'administration.`,
          is_read: false
        });

      if (notificationError) {
        console.error("Erreur lors de la cr√©ation de la notification:", notificationError);
        throw notificationError;
      }

      const { error: updateError } = await supabase
        .from("promo_usage")
        .update({ 
          // Note: Ces champs devront √™tre ajout√©s √† la table promo_usage si n√©cessaire
        })
        .eq("id", promoUsageId);

      if (updateError) {
        console.error("Erreur lors de la mise √† jour de l'utilisation:", updateError);
      }

      showSuccess("Paiement confirm√©", "Le propri√©taire du code promo a √©t√© notifi√© du paiement");
    } catch (error) {
      console.error("Erreur lors de la confirmation du paiement:", error);
      showError("Erreur", "Impossible de confirmer le paiement");
    } finally {
      setLoading(false);
    }
  };

  const notifyPromoOwner = async (promoCodeId: string, promoOwnerId: string, promoCode: string) => {
    try {
      console.log("Notification du propri√©taire du code promo:", { promoCodeId, promoOwnerId, promoCode });

      const { error } = await supabase
        .from("notifications")
        .insert({
          user_id: promoOwnerId,
          type: "promo_code_used",
          title: "üéâ Code promo utilis√© !",
          message: `Votre code promo ${promoCode} vient d'√™tre utilis√© ! Attendez la confirmation de r√©cup√©ration pour recevoir votre revenu de 1000 FCFA.`,
          is_read: false
        });

      if (error) {
        console.error("Erreur lors de la notification:", error);
        throw error;
      }

      console.log("Notification envoy√©e avec succ√®s au propri√©taire du code promo");
    } catch (error) {
      console.error("Erreur lors de la notification du propri√©taire:", error);
    }
  };

  return {
    confirmRecoveryPayment,
    confirmPromoPayment,
    notifyPromoOwner,
    loading
  };
};
